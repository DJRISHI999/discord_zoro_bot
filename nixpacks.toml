[phases.setup]
nixPkgs = [
  'ffmpeg',
  'nodejs_20', # Provides the 'corepack' command itself
  'pnpm',      # Explicitly install pnpm via Nix
  'pkg-config', # Required by canvas
  'cairo',      # Required by canvas
  'pango',      # Required by canvas
  'libjpeg',    # Required by canvas
  'giflib',     # Required by canvas
  'librsvg',    # Required by canvas
  'python3',    # For node-gyp
  'gcc',        # For node-gyp / C++ compilation
  'binutils'    # For ldd
]

[phases.install]
cmds = [
  'pnpm config set ignore-scripts false', # Allow pnpm to run build scripts
  'pnpm install --frozen-lockfile',
  # Single multi-line command for canvas checks and potential rebuild
  '''\
  echo "Finding canvas directory..."; \
  CANVAS_DIR="/app/node_modules/.pnpm/canvas@3.1.0/node_modules/canvas/"; \
  echo "Canvas directory is set to: $CANVAS_DIR"; \
  if [ -d "$CANVAS_DIR" ]; then \
    echo "Canvas directory found. Changing to $CANVAS_DIR"; \
    cd "$CANVAS_DIR"; \
    echo "Currently in $(pwd)"; \
    echo "Attempting node-gyp rebuild for canvas (this may be redundant if pnpm install built it)..."; \
    # Run node-gyp rebuild. If pnpm install already built canvas.node, this might just confirm.
    # If not, this will attempt the build.
    npm_config_build_from_source=true node-gyp rebuild --verbose; \
    echo "node-gyp rebuild finished."; \
    echo "Listing contents of $CANVAS_DIR/build/Release/ after node-gyp rebuild:"; \
    ls -la build/Release/ || echo "Failed to list $CANVAS_DIR/build/Release/"; \
    echo "Running ldd on $CANVAS_DIR/build/Release/canvas.node after node-gyp rebuild:"; \
    ldd build/Release/canvas.node || echo "ldd failed or canvas.node not found in $CANVAS_DIR/build/Release/"; \
    echo "Changing back to /app"; \
    cd /app; \
  else \
    echo "Canvas directory $CANVAS_DIR NOT found!"; \
  fi
  '''
]

[phases.start]
# Assuming your package.json has "scripts": { "start": "node bot.js" }
# If not, Nixpacks will likely try 'node bot.js' or similar based on main field.
cmd = 'pnpm start'