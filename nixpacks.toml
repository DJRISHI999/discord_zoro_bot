[phases.setup]
nixPkgs = [
  'ffmpeg',
  'nodejs_20', # Provides the 'corepack' command itself
  'pnpm',      # Explicitly install pnpm via Nix
  'pkg-config', # Required by canvas
  'cairo',      # Required by canvas
  'pango',      # Required by canvas
  'libjpeg',    # Required by canvas
  'giflib',     # Required by canvas
  'librsvg',    # Required by canvas
  'python3',    # For node-gyp
  'gcc',        # For node-gyp / C++ compilation
  'binutils'    # For ldd
]

[phases.install]
cmds = [
  'pnpm install --frozen-lockfile',
  'echo "Finding canvas directory..."',
  # The path /app/node_modules/.pnpm/canvas@3.1.0/node_modules/canvas/ is confirmed by previous logs
  'CANVAS_DIR="/app/node_modules/.pnpm/canvas@3.1.0/node_modules/canvas/"',
  'echo "Canvas directory should be $CANVAS_DIR"',
  'if [ -d "$CANVAS_DIR" ]; then',
  '  cd "$CANVAS_DIR"',
  '  echo "Currently in $(pwd)"',
  '  echo "Attempting node-gyp rebuild for canvas..."',
  # Force build from source and be verbose
  '  npm_config_build_from_source=true node-gyp rebuild --verbose',
  '  echo "node-gyp rebuild finished."',
  '  echo "Listing contents of $CANVAS_DIR/build/Release/ after node-gyp rebuild:"',
  '  ls -la build/Release/ || echo "Failed to list $CANVAS_DIR/build/Release/"',
  '  echo "Running ldd on $CANVAS_DIR/build/Release/canvas.node after node-gyp rebuild:"',
  '  ldd build/Release/canvas.node || echo "ldd failed or canvas.node not found in $CANVAS_DIR/build/Release/"',
  '  cd /app', # Go back to project root
  'else',
  '  echo "Canvas directory $CANVAS_DIR not found!"',
  'fi'
]

[phases.start]
# Assuming your package.json has "scripts": { "start": "node bot.js" }
# If not, Nixpacks will likely try 'node bot.js' or similar based on main field.
cmd = 'pnpm start'